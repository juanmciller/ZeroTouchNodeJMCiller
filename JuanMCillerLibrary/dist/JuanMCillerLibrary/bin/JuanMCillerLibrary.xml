<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JuanMCillerLibrary</name>
    </assembly>
    <members>
        <member name="M:JuanMCillerLibrary.BreakContinue.FilteringOddNumbers(System.Collections.Generic.List{System.Int32})">
            <summary>
            This method filters odd numbers from the list.
            </summary>
            <param name="numbers">List of numbers</param>
            <returns>List with odd numbers</returns>
        </member>
        <member name="T:JuanMCillerLibrary.Dictionaries">
            <summary>
            Contains methods related to dictionaries.
            </summary>
        </member>
        <member name="M:JuanMCillerLibrary.Dictionaries.CreateDictionary(System.String[],System.Object[])">
            <summary>
            Creates a dictionary from arrays of keys and values.
            </summary>
            <param name="keys">Array of keys.</param>
            <param name="values">Array of values.</param>
            <returns>The dictionary containing the key-value pairs.</returns>
        </member>
        <member name="M:JuanMCillerLibrary.Dictionaries.GetListAllowedEntrants(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Generates a list of messages indicating whether each person is allowed to enter the club based on their name and age.
            </summary>
            <param name="people">A list of dictionaries representing people with "Name" and "Age" keys.</param>
            <returns>A list of strings containing messages about whether each person is allowed to enter the club.</returns>
        </member>
        <member name="M:JuanMCillerLibrary.ForLoop.CompareWithTarget(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Compare a list of numbers with a target.
            </summary>
            <param name="numbers">Numbers to compare with a target.</param>
            <param name="target">Target value.</param>
            <returns>A list of strings describing the comparison results.</returns>
        </member>
        <member name="M:JuanMCillerLibrary.IFStatement.GetTestResult(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Method to get the average of a 3-test exam.
            </summary>
            <param name="student">Name of the student.</param>
            <param name="testA">First mark.</param>
            <param name="testB">Second mark.</param>
            <param name="testC">Third mark.</param>
            <returns>Result of the exam.</returns>
        </member>
        <member name="T:JuanMCillerLibrary.MyFirstNode">
            <summary>
            
            </summary>
        </member>
        <member name="M:JuanMCillerLibrary.MyFirstNode.GetDataType(System.Object)">
            <summary>
            This is our first method to retrieve the Data Type of an input.
            </summary>
            <param name="myVariable">This variable can be whatever input data type.</param>
            <returns>A C# Data type</returns>
        </member>
        <member name="T:JuanMCillerLibrary.Numbers">
            <summary>
            This is my Numbers class.
            </summary>
        </member>
        <member name="M:JuanMCillerLibrary.Numbers.ReturnMathOperation(System.Double,System.Double)">
            <summary>
            This node executes the sum and product of two values.
            </summary>
            <param name="firstValue">First value of the math operation.</param>
            <param name="lastVAlue">Second value of the math operation.</param>
            <returns>Returns a dictionary containing the sum and product of the two input values.</returns>
        </member>
        <member name="M:JuanMCillerLibrary.Strings.ConcatenateStrings(System.String,System.String)">
            <summary>
            This is a method to concatenate two strings.
            </summary>
            <param name="myString1">My first string input.</param>
            <param name="myString2">My second string input.</param>
            <returns>The result of merging two string inputs.</returns>
        </member>
        <member name="M:JuanMCillerLibrary.Strings.GetStringLength(System.String)">
            <summary>
            This code gets the length of a string.
            </summary>
            <param name="myString">String input.</param>
            <returns>Returns an integer.</returns>
        </member>
        <member name="M:JuanMCillerLibrary.Switch.SwitchStatement(System.Int32)">
            <summary>
            Method to outcome switch values.
            </summary>
            <param name="number">Number to be processed within the Switch statement.</param>
            <returns></returns>
        </member>
        <member name="M:JuanMCillerLibrary.TryCatch.CatchJuan(System.Collections.Generic.List{System.String})">
            <summary>
            Method to check if a list of names contains "Juan" and generate a result for each name.
            </summary>
            <param name="names">List of names to be checked</param>
            <returns>List of strings containing the result for each name</returns>
        </member>
        <member name="M:JuanMCillerLibrary.TryCatch.Division(System.Int32,System.Int32)">
            <summary>
            Performs division operation on two input numbers and returns the result as a string.
            </summary>
            <param name="input1">The first input number.</param>
            <param name="input2">The second input number.</param>
            <returns>A string containing the result of the division operation or an error message.</returns>
        </member>
        <member name="M:JuanMCillerLibrary.WhileLoop.PrintEvenNumbers(System.Int32)">
            <summary>
            Method to print even and odd numbers.
            </summary>
            <param name="limit"></param>
            <returns>List with all the odd and even numbers</returns>
        </member>
    </members>
</doc>
